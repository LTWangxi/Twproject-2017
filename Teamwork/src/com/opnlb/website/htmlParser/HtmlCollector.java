package com.opnlb.website.htmlParser;import java.io.FileInputStream;import java.io.InputStream;import java.util.Enumeration;import java.util.Hashtable;import java.util.Vector;public class HtmlCollector extends HtmlVisitor {  protected MyVector tagStack = new MyVector();  protected MyVector elements;  protected boolean collected;  protected static Hashtable dontMatch = new Hashtable();  protected static String[] dontMatchStrings = {  "AREA", "BASE", "BASEFONT", "BR", "COL", "HR", "IMG", "INPUT",                                                  "ISINDEX", "LINK", "META", "P", "PARAM" };  static {    Integer dummy = new Integer(0);    for (int i=0; i < dontMatchStrings.length; i++)      dontMatch.put(dontMatchStrings[i], dummy);  }  private static class TagStackEntry {    String tagName;    int index;  }  private static class MyVector extends Vector {    MyVector()      { super();  }    MyVector(int n) { super(n); }    public void popN(int n) {      elementCount -= n;    }  }  protected int pushNode(HtmlDocument.HtmlElement e) {    elements.addElement(e);    return elements.size()-1;  }  public void visit(HtmlDocument.Comment c)     {    pushNode(c);  }  public void visit(HtmlDocument.Text t)        {    pushNode(t);  }  public void visit(HtmlDocument.Newline n)     {    pushNode(n);  }  public void visit(HtmlDocument.Tag t)         {    TagStackEntry ts = new TagStackEntry();    int index;    index = pushNode(t);    if (! dontMatch.containsKey(t.tagName.toUpperCase())) {      ts.tagName = t.tagName;      ts.index = index;      tagStack.addElement(ts);    }  }  public void visit(HtmlDocument.EndTag t)      {    int i;    for (i=tagStack.size()-1; i >= 0; i--) {      TagStackEntry ts = (TagStackEntry) tagStack.elementAt(i);      if (t.tagName.equalsIgnoreCase(ts.tagName)) {        HtmlDocument.TagBlock block;        HtmlDocument.ElementSequence blockElements;        HtmlDocument.Tag tag;        HtmlDocument.HtmlElement element;        int count=0;        blockElements = new HtmlDocument.ElementSequence(elements.size() - ts.index - 1);        for (int j=ts.index+1; j<elements.size(); j++) {          element = (HtmlDocument.HtmlElement) elements.elementAt(j);          blockElements.addElement(element);          element.setOwnerSequence(blockElements);          element.setPositionInSequence(count);          ++count;        }        tag = (HtmlDocument.Tag) elements.elementAt(ts.index);        block = new HtmlDocument.TagBlock(tag.tagName, tag.attributeList, blockElements);        elements.popN(elements.size() - ts.index);        elements.addElement(block);        tagStack.popN(tagStack.size()-i);        collected = true;        break;      }    }    if (i < 0)      pushNode(t);  }  public void visit(HtmlDocument.TagBlock bl) {    HtmlCollector c = new HtmlCollector();    c.start();    c.visit(bl.body);    c.finish();    pushNode(bl);  }  public void visit(HtmlDocument.ElementSequence s) {    elements = new MyVector(s.elements.size());    collected = false;    for (Enumeration e = s.elements.elements(); e.hasMoreElements(); )      ((HtmlDocument.HtmlElement)e.nextElement()).accept(this);    if (collected)      s.elements = elements;  }  public void start() {}  public void finish() {}  public static void main (String[] args) throws Exception {    InputStream r = new FileInputStream(args[0]);    HtmlDocument document;    try {      document = new com.opnlb.website.htmlParser.parser.HtmlParser(r).HtmlDocument();      document.accept(new HtmlScrubber());      document.accept(new HtmlCollector());      document.accept(new HtmlDumper(System.out));    }    finally {      r.close();    }  }}